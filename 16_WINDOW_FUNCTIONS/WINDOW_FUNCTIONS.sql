-- OVER()
-- NO VALUE MEANS ALL RECORDS
SELECT DEPARTMENT, AVG(SALARY) OVER() FROM EMPLOYEES ;


-- PARTITION BY
-- WORKS AS GROUP BY
SELECT 
	DEPARTMENT, 
    SALARY, 
    AVG(SALARY) OVER(PARTITION BY DEPARTMENT) AS DEPT_AVG,
    AVG(SALARY) OVER() AS COMPANY_AVG
FROM EMPLOYEES ;

SELECT 
	DEPARTMENT, 
    COUNT(*) OVER(PARTITION BY DEPARTMENT) AS DEPARTMENT_COUNT,
    COUNT(*) OVER() AS COMPANY_COUNT
FROM EMPLOYEES;

SELECT 
	DEPARTMENT,
    SUM(SALARY) OVER(PARTITION BY DEPARTMENT)
FROM EMPLOYEES;

-- ORDER BY WITH WINDOWS
SELECT
	EMP_NO,
    DEPARTMENT,
    SALARY,
    SUM(SALARY) OVER(PARTITION BY DEPARTMENT ORDER BY SALARY) AS ROLLING_DEPT_SALARY,
    SUM(SALARY) OVER(PARTITION BY DEPARTMENT) AS TOTAL_DEPT_SALARY
FROM EMPLOYEES;

SELECT 
    emp_no, 
    department, 
    salary, 
    MIN(salary) OVER(PARTITION BY department ORDER BY salary DESC) as rolling_min
FROM employees;

-- RANK()
-- RETURNS RANK OF CURRENT ROW WITHIN ITS PARTITION

SELECT 
    emp_no, 
    department, 
    salary, 
    RANK() OVER(PARTITION BY DEPARTMENT ORDER BY SALARY DESC) as DEPT_SALARY_RANK,
    RANK() OVER(ORDER BY salary DESC) as OVERALL_SALARY_RANK
FROM employees;

-- ROW NUMBER()
-- NO CLASHES ONLY ROW NUMBERS IN THE RESPECTIVE WINDOW
SELECT 
    emp_no, 
    department, 
    salary, 
    ROW_NUMBER() OVER(PARTITION BY DEPARTMENT ORDER BY SALARY DESC) as ROW_NUM, 
    RANK() OVER(PARTITION BY DEPARTMENT ORDER BY SALARY DESC) as DEPT_SALARY_RANK,
    RANK() OVER(ORDER BY salary DESC) as OVERALL_SALARY_RANK
FROM employees;


-- DENSE_RANK()
-- SAME AS RANK BUT ON CLASHES SUBSEQUENT RANKS WILL NOT BE SKIPPED -> 4 4 4 5 (NOT LIKE RANK -> 4 4 4 7)
SELECT 
    emp_no, 
    department, 
    salary, 
    DENSE_RANK() OVER(PARTITION BY DEPARTMENT ORDER BY SALARY DESC) as DEPT_SALARY_DENSE_RANK,
    DENSE_RANK() OVER(ORDER BY salary DESC) as OVERALL_SALARY_DENSE_RANK,
    ROW_NUMBER() OVER(PARTITION BY DEPARTMENT ORDER BY SALARY DESC) as ROW_NUM, 
    RANK() OVER(PARTITION BY DEPARTMENT ORDER BY SALARY DESC) as DEPT_SALARY_RANK
FROM employees;

-- FIRST_VALUE(EXPRSN)
-- LAST_VALUE(EXPRSN)
-- NTH_VALUE(EXPRSN, N)

SELECT
	EMP_NO,
    DEPARTMENT,
    SALARY,
    first_value(EMP_NO) OVER(ORDER BY SALARY DESC)
FROM EMPLOYEES;


-- LEAD AND LAG
-- LAG FOR PREVIOUS AND LEAD FOR NEXT ROW
SELECT
	EMP_NO,
	DEPARTMENT,
    SALARY,
    SALARY - LAG(SALARY) OVER(ORDER BY SALARY DESC) AS SALARY_DIFF
FROM EMPLOYEES;

-- SALARY 2 ROWS BACK
SELECT
	EMP_NO,
	DEPARTMENT,
    SALARY,
    SALARY - LAG(SALARY, 2) OVER(ORDER BY SALARY DESC) AS SALARY_DIFF
FROM EMPLOYEES;

SELECT
	EMP_NO,
	DEPARTMENT,
    SALARY,
    SALARY - LEAD(SALARY) OVER(ORDER BY SALARY DESC) AS SALARY_DIFF
FROM EMPLOYEES;


-- NTILE()
SELECT 
    emp_no, 
    department, 
    salary,
    NTILE(4) OVER(PARTITION BY department ORDER BY salary DESC) AS dept_salary_quartile,
	NTILE(4) OVER(ORDER BY salary DESC) AS salary_quartile
FROM employees;





























